# 开始符
CompUnit    ::= FuncDef;

# 函数定义与返回类型
FuncDef     ::= Type Ident "(" ParamList ")" Block;

# 函数参数列表定义
ParamList	::= /* empty */ | Param | ParamList ',' Param
Param       ::= Type Ident; 
Type        ::= "int" | "void" ;

# 块
Block       ::= "{" Stmt* "}";

# 语句
Stmt        ::= "return" Expr ";";
#[[ Expr        ::= Number | Ident ; ]]
Expr        ::= UnaryExpr;

# 以下优先级从高到低
## 1
PrimaryExpr  ::= "(" Expr ")" | Number | Ident;
## 2 一元表达式
UnaryExpr    ::= PrimaryExpr | UnaryOp UnaryExpr;
UnaryOp     ::= "+" | "-" | "!";
### 3 乘，除，取余表达式
#MulExpr      ::= UnaryExpr | MulExpr ("*" | "/" | "%") UnaryExpr;
### 4 加, 减表达式
#AddExpr      ::= MulExpr | AddExpr ("+" | "-") MulExpr;
### 5
#RelExpr      ::= AddExpr | RelExpr ("<" | ">" | "<=" | ">=") AddExpr;
### 6
#EqExpr       ::= RelExpr | EqExpr ("==" | "!=") RelExpr;
### 7
#LAndExpr     ::= EqExpr | LAndExpr "&&" EqExpr;
### 8
#LOrExpr      ::= LAndExpr | LOrExpr "||" LAndExpr;

Number      ::= INT_LITERAL;
Ident       ::= [a-zA-Z_][0-9a-zA-Z_]*;

